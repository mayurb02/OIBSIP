package com.example.mycalc;

import androidx.appcompat.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.os.Bundle;

import java.util.Stack;

public class MainActivity extends AppCompatActivity {

    private EditText editTextResult;
    private StringBuilder input = new StringBuilder();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        editTextResult = findViewById(R.id.editTextResult);

        // Set up button listeners
        setButtonListeners();
    }
    private void setButtonListeners() {
        int[] buttonIds = {
                R.id.button0, R.id.button1, R.id.button2, R.id.button3,
                R.id.button4, R.id.button5, R.id.button6, R.id.button7,
                R.id.button8, R.id.button9, R.id.buttonAdd, R.id.buttonSubtract,
                R.id.buttonMultiply, R.id.buttonDivide, R.id.buttonClear, R.id.buttonEquals
        };

        for (int id : buttonIds) {
            Button button = findViewById(id);
            button.setOnClickListener(this::onButtonClick);
        }
    }
    private void onButtonClick(View view) {
        Button button = ( Button ) view;
        String buttonText = button.getText().toString();

        switch (buttonText) {
            case "C":
                input.setLength(0);
                break;
            case "=":
                input.append("=");
                String result = evaluateExpression(input.toString());
                input.setLength(0);
                input.append(result);
                break;
            default:
                input.append(buttonText);
                break;
        }
        editTextResult.setText(input.toString());
}
    private String evaluateExpression(String expression) {
        // Simple evaluation logic (you can enhance this)
        try {
            Stack<Double> values = new Stack<>();
            Stack<Character> ops = new Stack<>();
            for (int i = 0; i < expression.length(); i++) {
                char c = expression.charAt(i);
                if (Character.isDigit(c)) {
                    StringBuilder sb = new StringBuilder();
                    while (i < expression.length() && Character.isDigit(expression.charAt(i))) {
                        sb.append(expression.charAt(i++));
                    }
                    values.push(Double.parseDouble(sb.toString()));
                    i--;
                } else if (c == '+' || c == '-' || c == '*' || c == '/') {
                    while (!ops.isEmpty() && precedence(c) <= precedence(ops.peek())) {
                        values.push(applyOp(ops.pop(), values.pop(), values.pop()));
                    }
                    ops.push(c);
                }
            }
            while (!ops.isEmpty()) {
                values.push(applyOp(ops.pop(), values.pop(), values.pop()));
            }
            return String.valueOf(values.pop());
        } catch (Exception e) {
            return "Error";
        }
    }

    private int precedence(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
        }
        return 0;
    }

    private double applyOp(char op, double b, double a) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) throw new UnsupportedOperationException("Cannot divide by zero");
                return a / b;
        }
        return 0;
    }
}
